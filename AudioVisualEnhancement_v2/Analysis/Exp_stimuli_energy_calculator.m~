%% This function can be used to calculate and plot the energy variability 
% across stimuli configurations.

clear all
close all
clc

% add convolve2 function to path


screenwidhsize = 53; % in cm Mac 13 = 33
screen_width_resolution = 1920; % in Mac 13 2560 pixels
distance2screen = 56; % in cm

pixel_size = screenwidhsize/screen_width_resolution; %Pixels are squared, so we only need to know one dimension
one_degree_length_incm = tan(deg2rad(1/2))*distance2screen*2;
one_degree_length_in_px = one_degree_length_incm/pixel_size;
%one_degree_length_in_px = 2*distance2screen*tan((1/2)*(pi/180))*(screen_width_resolution/screenwidhsize);

% add convolve2 function to path
% addpath('./convolve2');
% set basic noisy Gabor parameters (define in each trial contrast and phase
% during the loop(

ppd = round(one_degree_length_in_px); % pixels per degree of visual angle
addpath('./convolve2');

% set test parameters
n = 5; % number of test images

noisedims = 1:0.5:20;

for inoisedim = 1 : length(noisedims)
% set noisy Gabor parameters
cfg          = [];
cfg.patchsiz = ppd*22.0; % patch size (pix)
cfg.patchenv = ppd*1.5; % patch spatial envelope s.d. (pix)
cfg.patchlum = 0.5; % patch background luminance
cfg.freq = 1; % spatial frequency
cfg.gaborper = ppd*(1/cfg.freq);
cfg.gaborper = ppd*1.0; % Gabor spatial period (pix)
cfg.gaborang = pi/180*45; % Gabor orientation (rad)
cfg.gaborphi = 0; % Gabor unit phase
cfg.gaborcon = 0.03; % Gabor Michelson contrast
cfg.noisedim = cfg.gaborper/noisedims(inoisedim) ; % noise dimension (pix)
cfg.noisecon = 0.3/3; % noise RMS contrast
cfg.envscale = 10^10; % patch spatial envelope s.d. (pix)
% precompute contrast weights

% precompute signal energy filters
gaborang = pi/180*(0:5:180); % filter orientations (rad)
for j = 1:length(gaborang)
    cfg_e{j} = get_patch_energy(setfield(cfg,'gaborang',gaborang(j)));
end

cfg_e{1,1}.gabor{1,2}

patchsize = 200;
mask = zeros(patchsize)

[rr cc] = meshgrid(1:patchsize,1:patchsize);
mask_radius = patchsize/2;

% center mask
mask(1).filter = sqrt((rr-(patchsize/2)).^2+(cc-(patchsize/2)).^2)<=mask_radius/2;  %in pixels    

% medial mask
mask(2).filter = (sqrt((rr-(patchsize/2)).^2+(cc-(patchsize/2)).^2)<=(2*mask_radius)/3 & sqrt((rr-(patchsize/2)).^2+(cc-(patchsize/2)).^2)>=(1*mask_radius)/3);  %in pixels    

% periphery mask
mask(3).filter = (sqrt((rr-(patchsize/2)).^2+(cc-(patchsize/2)).^2)<=mask_radius & sqrt((rr-(patchsize/2)).^2+(cc-(patchsize/2)).^2)>=mask_radius/2);  %in pixels    

imagesc(C)

imagesc(energies(:,5:15))
figure()
imagesc(energies1(:,5:15))
figure()
imagesc(energies2(:,5:15))

%%
clear all
close all
clc

% load results
load('test_gabor_noise.mat');

% plot correlation profiles
i = find(gaborang == pi/4); % reference energy channel
re = corr(e,e(:,8)); % correlation between signal energies
rx = corr(e,x); % correlation between signal energies and RMS contrast
figure;
hold on
plot(0:5:180,re);
plot(0:5:180,rx);
hold off
xlabel('orientation (deg)');
ylabel('correlation strength');

plot(0:5:180,mean(e))

% simulate hypothetical observer
eprime = [8,4]; % raw energy sensitivities for the two target orientations
% compute decision variable
j = find(ismember(gaborang,pi/4*[1,3]));
dv = sum(bsxfun(@times,e(:,j),eprime),2);
% simulate observer many times
for i = 1:1000
    resp = dv+sqrt(2)*randn(n,1) > mean(dv);
    % estimate energy sensitivities
    b = glmfit([e(:,j),x],resp,'binomial','link','probit');
  
    eprime_hat(i,:) = b(2:3)*sqrt(2);
    xprime_hat(i,1) = b(4);
end

mean(eprime_hat)
mean(xprime_hat)


figure;
hold on
 scatter(xprime_hat,eprime_hat(:,1))
  scatter(xprime_hat,eprime_hat(:,2))
hold off
 scatter(x,resp)
hold on
 scatter(e(:,1),resp)
 scatter(e(:,2),resp)
  %scatter(xprime_hat,eprime_hat(:,2))
hold off

plot(0:5:180,rx);

% loading data
main_folder = '/Volumes/ALEX_EXT/Experimentos/DondersExperiments/AudioVisualEnhancement/'

for isession = 1 : n_sessions
    
    load([main_folder, 'results/APB/APB_AVE_detect.mat'])
    
    n_sessions = size(Experimentalsession,2);
    
    load([main_folder, 'results/APB/imgfiles/IMG_run_1.mat'])
    
    n_stimuli = length(stimuli);
    
    
    if isession == 1 % only precompute weights for the first session
        screenwidhsize = Experimentalsession(isession).detect.screenwidhsize; % in cm Mac 13 = 33
        screen_width_resolution = Experimentalsession(isession).detect.screen_width_resolution; % in Mac 13 2560 pixels
        distance2screen = Experimentalsession(isession).detect.distance2screen; % in cm
        
        pixel_size = screenwidhsize/screen_width_resolution; %Pixels are squared, so we only need to know one dimension
        one_degree_length_incm = tan(deg2rad(1/2))*distance2screen*2;
        one_degree_length_in_px = one_degree_length_incm/pixel_size;
        %one_degree_length_in_px = 2*distance2screen*tan((1/2)*(pi/180))*(screen_width_resolution/screenwidhsize);
        
        % add convolve2 function to path
        % addpath('./convolve2');
        % set basic noisy Gabor parameters (define in each trial contrast and phase
        % during the loop(
        
        ppd = round(one_degree_length_in_px); % pixels per degree of visual angle
        
        
        % set noisy Gabor parameters
        cfg = Experimentalsession(isession).detect.cfg
        
        
        % creating different masks
        patchsiz = cfg.patchsiz;
        
        [rr cc] = meshgrid(1:patchsiz,1:patchsiz);
        mask_radius = patchsiz/2;
        % no mask
        mask(1).filter = ones(patchsiz);
        % center mask
        mask(2).filter = sqrt((rr-(patchsiz/2)).^2+(cc-(patchsiz/2)).^2)<=mask_radius/2;  %in pixels
        % periphery mask
        %mask(3).filter = (sqrt((rr-(patchsiz/2)).^2+(cc-(patchsiz/2)).^2)<=mask_radius & sqrt((rr-(patchsiz/2)).^2+(cc-(patchsiz/2)).^2)>=mask_radius/2);  %in pixels
        mask(3).filter = sqrt((rr-(patchsiz/2)).^2+(cc-(patchsiz/2)).^2)>=mask_radius/2;  %in pixels
        for imask = 1 : length(mask)
            % precompute signal energy filters
            gaborang = pi/180*(1:1:180); % filter orientations (rad)
            for j = 1:length(gaborang)
                % precomputing grating weights
                cfg_e{j} = get_patch_energy(setfield(cfg,'gaborang',gaborang(j)));
                % applying mask
                masked_weight(imask).cfg_e{j} = cfg_e{j};
                % intersecting mask with stimulus
                masked_weight(imask).cfg_e{j}.gabor{1,1} = mask(imask).filter.*cfg_e{j}.gabor{1,1};
                masked_weight(imask).cfg_e{j}.gabor{1,2} = mask(imask).filter.*cfg_e{j}.gabor{1,2};
                
            end
            % imagesc(masked_weight(3).cfg_e{50}.gabor{1,1})
        end
        
        
    end
    % calculating energies for each stimulus, orientation and mask
      
    for imask = 1 : length(mask)
        for istimuli = 1:n_stimuli
            for j = 1:length(gaborang)
                energy.session(isession).mask(imask).stim(istimuli,j) = get_patch_energy(masked_weight(imask).cfg_e{j},stimuli(istimuli).img);
                energy_sensitivity(imask).e(j,:) = glmfit([energy.session(isession).mask(imask).stim(:,j)],responses_recoded,'binomial','link','probit');
             end
        end
    end
     
    
    
Experimentalsession(isession).detect.responses_vector    
responses_recoded = zeros(length(Experimentalsession(isession).detect.responses_vector),1 )    
responses_recoded(find(strcmp(Experimentalsession(isession).detect.responses_vector(:,10) ,'y'))) = 1;   

plot(energy_sensitivity(1).e(:,2)

imagesc(energy_sensitivity(1).e(:,1))
imagesc(energy_sensitivity(1).e(:,2))

 for j = 1:length(gaborang)
b = glmfit([e(:,j)],resp,'binomial','link','probit');
   energy.session(isession).mask(imask).stim(istimuli,j) 
    eprime_hat(i,:) = b(2:3)*sqrt(2);
    xprime_hat(i,1) = b(4);
 end

end

imagesc(energy.session(isession).mask(imask).stim)
       

% save results
save('test_gabor_noise.mat','n','gaborang','x','e','cfg');

energy.mask(imask).stim(istimuli,j)


